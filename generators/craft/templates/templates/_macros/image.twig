{# ================================================================== #}
{# Image
{# ================================================================== #}
{#
    {% import '_macros/image' as image %}
#}


{# ------------------------------------------------------------------ #}
{# Get Params
{# ------------------------------------------------------------------ #}
{#
  {{ image.getParams(transformKey, quality) }}

  Returns a params object that can be used for getting a srcset
#}

{%- macro getParams(transformKey, quality = 50) -%}
  {# Create the transforms #}
  {% set transforms = {
    "scale": {
      width: 10,
      mode: 'max'
    },

    "1x1": {
      width: 10,
      height: 10,
      mode: 'crop'
    },

    "4x3": {
      width: 12,
      height: 9,
      mode: 'crop'
    },

    "16x9": {
      width: 16,
      height: 9,
      mode: 'crop'
    },
  } %}

  {# Set image params #}
  {% set transform = transforms[transformKey] %}
  {% set params = {
    w: transform.width,
    h: transform.height ?? null,
    q: quality,
    fit: transform.mode
  } %}
  {% return params %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Background Image Srcset
{# ------------------------------------------------------------------ #}
{#
  <div class="lazyload" {{ image.bgSet(CraftAsset, { transform: '7x5' }) }}></div>

  Returns the attributes neccessary to load a background image via lazysizes.
#}

{%- macro bgSet(asset, options) -%}
{% apply spaceless %}
  {% import _self as image %}

  {# Animated GIFs #}
  {% if asset | length and asset.extension == 'gif' %}
    {% return image.bgImg(asset.url) %}
  {% endif %}

  {# Set the focal point #}
  {% set fpX = asset.focalPoint | first %}
  {% set fpY = asset.focalPoint | last %}

  {# Set some defaults #}
  {% set defaults = {
    transform: '7x5'
  } %}

  {# Merge options with defaults #}
  {% set options = defaults | merge(options) %}

  {# Get the image params #}
  {% set params = image.getParams(options.transform) | merge({
    'fp-x': fpX,
    'fp-y': fpY
  }) %}

  style="background-position: {{ fpX * 100 }}% {{ fpY * 100 }}%;"
  data-bgset="{{ image.srcset(asset, params) }}" data-sizes="auto"
{% endapply %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Background Image
{# ------------------------------------------------------------------ #}
{#
  {{ image.bgImg(imageUrl) }}

  Returns markup for a background image url
#}

{%- macro bgImg(imageUrl) -%}
style="background-image: url({{ imageUrl }});"
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Image URL
{# ------------------------------------------------------------------ #}
{#
  {{ image.imgUrl(CraftAsset, { transform: '7x5' }, 50) }}

  Returns the URL for a single transformed image
#}

{%- macro imgUrl(asset, options, sizeMultiplier = 50) -%}
  {% import _self as image %}

  {# Animated GIFs #}
  {% if asset | length and asset.extension == 'gif' %}
    {% return asset.url %}
  {% endif %}

  {# Set some defaults #}
  {% set defaults = {
    transform: '7x5'
  } %}

  {# Merge options with defaults #}
  {% set options = defaults | merge(options) %}

  {# Get the image params #}
  {% set params = image.getParams(options.transform) %}

  {# Get scaled width and height #}
  {% set scaledWidth = params.w * sizeMultiplier %}
  {% set scaledHeight = params.h * sizeMultiplier %}

  {# Get updated params #}
  {% set transformParams = {
    width: scaledWidth < asset.width ? scaledWidth : asset.width,
    height: scaledHeight < asset.height ? scaledHeight : asset.height,
    mode: params.fit,
    quality: params.q
  } %}

  {% set transformedImage = craft.imager.transformImage(asset,
    { width: transformParams.width },
    {
      ratio: transformParams.width and transformParams.height ? (transformParams.width/transformParams.height) : null,
      auto: 'format,compress'
    })
  %}

  {% return transformedImage.url %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Img
{# ------------------------------------------------------------------ #}
{#
  {{ image.img(CraftAsset, {
    alt: 'My alt text',
    class: 'foo',
    transform: '7x5',
    wrap: true,
    wrapperClasses: ''
  }) }}

  Returns an <img> or <picture> for a Craft asset

  "Options" argument will take an optional key of `smallTransform` which is
  the name of the transform to use at smaller sizes.
  If the asset has a `smallVersion` field set to an alternate asset, the macro
  will automatically display that asset at smaller sizes:

  smallTransform: '1x1'
#}

{%- macro img(asset, options) -%}
  {% import _self as image %}

  {# Set a default for img #}
  {% set img = null %}

  {# Animated GIFs #}
  {% if asset | length and asset.extension == 'gif' %}
    {% set img %}
      <img src="{{ asset.url }}" alt="{{ options.alt ?? '' }}">
    {% endset %}
    {% return img %}
  {% endif %}

  {# Set some defaults #}
  {% set defaults = {
    alt: '',
    class: '',
    transform: '7x5',
    wrap: true,
    wrapperClasses: 'image--fade'
  } %}

  {# Merge options with defaults #}
  {% set options = defaults | merge(options) %}

  {# Get the image params #}
  {% set fullParams = image.getParams(options.transform) | merge({
    'fp-x': asset.focalPoint | first,
    'fp-y': asset.focalPoint | last
  }) %}

  {# Get the width/height for the placeholder image #}
  {% set placeholderWidth = fullParams.w %}
  {% set assetRatio = asset.height / asset.width %}
  {% set placeholderHeight = fullParams.h ? fullParams.h : assetRatio * placeholderWidth %}

  {% set img %}
    <img
      class="{{ options.class }} lazyload"
      alt="{{ options.alt }}"
      src="{{ craft.svgplaceholder.generate({ width: placeholderWidth, height: placeholderHeight }) }}"
      data-sizes="auto"
      data-srcset="{{ image.srcset(asset, fullParams) }}"
      data-module-reveal="animate"
    >
  {% endset %}

  {# Return the element #}
  {% if options.wrap %}
    {% return image.wrap(img, asset, options) | raw %}
  {% else %}
    {{ img | raw }}
  {% endif %}

{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Wrap Image
{# ------------------------------------------------------------------ #}
{#
  {{ image.wrap(image, asset, options) }}

  Wraps an image in common markup.

  @param image (HTML)                     - [required] The HTML markup (e.g. <img>, <picture>, etc) to wrap
  @param asset (CraftAsset)               - [required] Asset to use for <noscript> fallback
  @param options.transform (String)       - [required] Transform to use for <noscript> fallback
  @param options.wrapperClasses (String)  - [optional] Class to add to wrapper
#}

{%- macro wrap(image, asset, options = {}) -%}
  {% import _self as image %}
{% set wrappedImg %}
<div class="image {{ options.wrapperClasses ?? '' }}">
  <div class="image__inner">
    {{ image | raw }}
    <noscript>
      <img class="noscript" src="{{ image.imgUrl(asset, { transform: options.transform }, 50) }}" alt="" />
    </noscript>
  </div>
</div>
{% endset %}
{% return wrappedImg | raw %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Srcset
{# ------------------------------------------------------------------ #}
{#
  {{ image.srcset(CraftAsset, params) }}

  Returns a srcset for a Craft asset
#}

{%- macro srcset(asset, params) -%}
  {% set srcsetItems = [] %}
  {% set resolution = 1.2 %}

  {% set transformedImages = craft.imager.transformImage(asset,
    [{ width: 300 }, { width: 2700 }],
    {
      ratio: params.w and params.h ? (params.w/params.h) : null,
      auto: 'format,compress',
      'fp-x': params['fp-x'],
      'fp-y': params['fp-y']
    },
    {
      fillTransforms: true,
      fillInterval: 300
    })
  %}

  {% for image in transformedImages %}
    {% set url = image.url %}
    {% set srcsetItems = srcsetItems | merge([
      url ~ " #{(image.width / resolution) | round}w"
    ]) %}
  {% endfor %}

  {% return srcsetItems | join(', ') | raw %}
{%- endmacro -%}
